/********************************************************************
                            Interfaces
********************************************************************/
/**
* @dev Returns the amount of tokens in existence.
*/
#define function totalSupply() view returns (uint256)

/**
* @dev Returns the amount of tokens owned by `account`.
*/
#define function balanceOf(address) view returns (uint256)

/**
* @dev Moves `amount` tokens from the caller's account to `recipient`.
*
* Returns a boolean value indicating whether the operation succeeded.
*
* Emits a {Transfer} event.
*/
#define function transfer(address,uint256) nonpayable returns (bool)

/**
* @dev Returns the remaining number of tokens that `spender` will be
* allowed to spend on behalf of `owner` through {transferFrom}. This is
* zero by default.
*
* This value changes when {approve} or {transferFrom} are called.
*/
#define function allowance(address,address) view returns (uint256)

/**
* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
*
* Returns a boolean value indicating whether the operation succeeded.
*
* IMPORTANT: Beware that changing an allowance with this method brings the risk
* that someone may use both the old and the new allowance by unfortunate
* transaction ordering. One possible solution to mitigate this race
* condition is to first reduce the spender's allowance to 0 and set the
* desired value afterwards:
* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
*
* Emits an {Approval} event.
*/
#define function approve(address,uint256) nonpayable returns (bool)

/**
* @dev Moves `amount` tokens from `sender` to `recipient` using the
* allowance mechanism. `amount` is then deducted from the caller's
* allowance.
*
* Returns a boolean value indicating whether the operation succeeded.
*
* Emits a {Transfer} event.
*/
#define function transferFrom(address, address, uint256) nonpayable returns (bool)

/**
* @dev Emitted when `value` tokens are moved from one account (`from`) to
* another (`to`).
*
* Note that `value` may be zero.
*/
#define event Transfer(address, address, uint256)

/**
* @dev Emitted when the allowance of a `spender` for an `owner` is set by
* a call to {approve}. `value` is the new allowance.
*/
#define event Approval(address, address, uint256)
/**
* @dev Returns the name of the token.
*/
#define function name() view returns (string)

/**
* @dev Returns the symbol of the token.
*/
#define function symbol() view returns (string)

/**
* @dev Returns the decimals places of the token.
*/
#define function decimals() view returns (uint8)

#define function mint(address,uint) nonpayable returns()
/********************************************************************
                        Storage Slots 
 ********************************************************************/
#define constant _totalSupply = FREE_STORAGE_POINTER()
#define constant _balanceOf = FREE_STORAGE_POINTER()
#define constant _allowance = FREE_STORAGE_POINTER()
#define constant name = FREE_STORAGE_POINTER()
#define constant symbol = FREE_STORAGE_POINTER()
#define constant DECIMAL = FREE_STORAGE_POINTER()

/********************************************************************
                            Methods 
********************************************************************/
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    
    dup1 __FUNC_SIG(totalSupply) eq totalSupply jumpi
    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
    dup1 __FUNC_SIG(transfer) eq transfer jumpi
    dup1 __FUNC_SIG(allowance) eq allowance jumpi
    dup1 __FUNC_SIG(approve) eq approve jumpi
    dup1 __FUNC_SIG(transferFrom) eq transferFrom jumpi
    dup1 __FUNC_SIG(name) eq name jumpi
    dup1 __FUNC_SIG(decimals) eq decimals jumpi
    dup1 __FUNC_SIG(mint) eq mint jumpi

    0x00 0x00 revert
    totalSupply:
        TOTALSUPPLY()
    balanceOf:
        BALANCEOF()
    transfer:
        TRANSFER()
    allowance:
        ALLOWANCE()
    approve:
        APPROVE()
    transferFrom:
        TRANSFERFROM()
    name:
        NAME()
    decimals:
        DECIMALS()
    mint:
        MINT()
}

/// @notice Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy the decimals into memory from the bytecode
    0x20                                    // [size] - byte size to copy
    0x20 codesize sub                       // [offset, size] - offset in the code to copy from
    0x00                                    // [mem, offset, size] - offset in memory to copy to
    codecopy                                // []

    // Copy the decimals from memory into the DECIMAL storage location
    0x00 mload                              // [decimals]
    [DECIMAL] sstore                  // []
}

#define macro TOTALSUPPLY() = takes(0) returns (1){
    // Load value from storage.
    [_totalSupply]   // [ptr]
    sload                // [value]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro BALANCEOF() = takes(0) returns (0){
    0x04 calldataload // [account]
    0x20 mstore       // []
    [_balanceOf]      // [balanceOfPointer]
    0x00              // [0x00,balanceOfPointer]
    mstore            // []
    0x40 0x00         // [0x00,0x40]
    sha3              // [sha3HashOf(account,balancePointer)]
    sload

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro TRANSFER() = takes(0) returns (0){
    // Check if there is sufficient balance with the caller
    caller  //[msg.sender]
    [_balanceOf]      //[balanceOfPointer,address]
    GET_MAPPING_SLOT() dup1//[balanceOfSlot,balanceOfSlot]
    sload dup1//[balanceOf msg.sender,balanceOf msg.sender,balanceOfSlot]
    0x24 calldataload//[amount, balanceOf msg.sender,balanceOf msg.sender,balanceOfSlot]
    // compare the amount to be transferred to the balance
    gt  //[isGreater,balanceOf msg.sender,balanceOfSlot]
    iszero
    valid jumpi

    0x00 0x00 revert
    // Reduce the balance of the caller
    valid:
        0x24 calldataload //[amount, balanceOf msg.sender,balanceOfSlot]
        swap1//[balanceOf msg.sender,amount, balanceOfSlot]
        sub  //[balanceOf msg.sender-amount, balanceOfSlot]
        swap1//[balanceOfSlot, balanceOf msg.sender-amount]
        sstore
    
    // increase the balance of the receiver
    0x04 calldataload //[receiver]
    [_balanceOf]      //[balanceOfPointer,address]
    GET_MAPPING_SLOT() dup1//[balanceOfSlot,balanceOfSlot]
    sload //[balanceOfReceiver,balanceOfSlot]
    0x24 calldataload //[amount, balanceOfReceiver,balanceOfSlot]
    add //[amount + balanceOfReceiver,balanceOfSlot]
    swap1
    sstore
}

#define macro ALLOWANCE() = takes(0) returns (0){
    // Get amount
    0x24 calldataload //[amount]
    // Get spender
    0x04 calldataload //[spenderAddress,amount]
    [_allowance]        // [allowancePointer,owner,spender]
    GET_MAPPING_SLOT()  // [ownerSlot,spender]
    GET_MAPPING_SLOT()  // [spenderSlot]
    sload

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro SETALLOWANCE() = takes(3) returns (0) {
    // [owner,spender,amount]
    [_allowance]        // [allowancePointer,owner,spender,amount]
    GET_MAPPING_SLOT()  // [ownerSlot,spender,amount]
    GET_MAPPING_SLOT()  // [spenderSlot,amount]
    sstore
}

#define macro APPROVE() = takes(0) returns (0){
    // Get amount
    0x24 calldataload //[amount]
    // Get spender
    0x04 calldataload //[spenderAddress,amount]
    caller            //[msg.sender,spenderAddress,amount]
    SETALLOWANCE()

    // Store value in memory.
    0x01 0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro TRANSFERFROM() = takes(0) returns (0){
    // Get amount
    0x44 calldataload // [amount]
    // Get receiver
    0x24 calldataload // [receiver,amount]
    caller                      // [caller,receiver,amount]
    // Get sender
    0x04 calldataload           // [sender,caller,receiver,amount]
    [_allowance]                // [allowancePointer,sender,caller,receiver,amount]
    GET_MAPPING_SLOT()          // [senderSlot,caller,receiver,amount]
    GET_MAPPING_SLOT() dup1     // [callerSlot,callerSlot,receiver,amount]
    sload dup1                  // [callerAllowance,callerAllowance,callerSlot,callerSlot,receiver,amount]
    dup5                        // [amount,callerAllowance,callerAllowance,callerSlot,receiver,amount]
    gt
    iszero
    valid jumpi
    0x00 0x00 revert
    valid:
        dup4                    // [amount,callerAllowance,callerAllowanceSlot,receiver,amount]
        swap1                   // [callerAllowance,amount,callerAllowanceSlot,receiver,amount]
        sub                     // [callerAllowance-amount,callerAllowanceSlot,receiver,amount]
        swap1                   // [callerAllowanceSlot,callerAllowance-amount,receiver,amount]
        sstore                  // [receiver,amount]
        // Get sender   
        0x04 calldataload       // [sender,receiver,amount]
        [_balanceOf]            // [balanceOfPointer,sender,receiver,amount]
        GET_MAPPING_SLOT() dup1 // [balanceSlot,balanceSlot,receiver,amount]
        sload                   // [balance,balanceSlot,receiver,amount]
        dup4 swap1              // [balance,amount,balanceSlot,receiver,amount]
        sub                     // [balance-amount,balanceSlot,receiver,amount]
        swap1                   // [balanceSlot,balance-amount,receiver,amount]
        sstore                  // [receiver,amount]
        [_balanceOf]            // [balanceOfPointer,receiver,amount]
        GET_MAPPING_SLOT() dup1 // [balanceSlot,balanceSlot,amount]
        sload                   // [balance,balanceSlot,amount]
        dup3                    // [amount,balance,balanceSlot,amount]
        add                     // [amount+balance,balanceSlot,amount]
        swap1                   // [balanceSlot,amount+balance,amount]
        sstore
    // Decrease allowance
    // Use transfer
    // Store value in memory.
    0x01 0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro NAME() = takes(0) returns (0){
    // Load value from storage
    [name]
    sload
    // store value in memory
    0x00 mstore
    // Return value
    0x20 0x00 return
}

#define macro DECIMALS() = takes(0) returns (0){
    // Load value from storage
    [DECIMAL]
    sload
    // store value in memory
    0x00 mstore
    // Return value
    0x20 0x00 return
}

#define macro MINT() = takes(0) returns (0){
    // Get balance of address
    0x04 calldataload //[address]
    [_balanceOf]      //[balanceOfPointer,address]
    GET_MAPPING_SLOT() dup1//[slotForAddress's balance,slotForAddress's balance]
    // Increase balance of address
    sload //[balanceOfAddress,slotForAddress's balance]
    0x24 calldataload//[amount,balanceOfAddress,slotForAddress's balance]
    add////[amount+balanceOfAddress,slotForAddress's balance]
    swap1
    sstore
    // Increase totalSupply
    [_totalSupply] sload    //[totalSupply]
    0x24 calldataload //[amount,totalSupply]
    add               //[amount+totalSupply]
    [_totalSupply]    //[totalSupplyPointer,amount+totalSupply]
    sstore
}

/********************************************************************
                    Data handling macros
********************************************************************/

// Given a key this macro will return the corresponding slot in a mapping
#define macro GET_MAPPING_SLOT() = takes(2) returns (1){
    //[storage slot, key]
    0x00//[0x00,storage slot, key]
    mstore//[key]
    0x20//[0x20,key]
    mstore
    0x40 //[0x40]
    0x00 //[0x00,0x40]
    // offset,size
    sha3
}